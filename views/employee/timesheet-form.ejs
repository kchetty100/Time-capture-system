<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <h1><span class="logo-re">re</span><span class="logo-v">v</span><span class="logo-erside">erside</span><span class="logo-asterisk">*</span></h1>
                    <p class="tagline">You are with good company</p>
                </div>
                <nav class="nav">
                    <% if (typeof user !== 'undefined' && user) { %>
                        <div class="user-info">
                            <span class="user-name">Welcome, <%= user.name %></span>
                            <div class="user-role"><%= user.role.charAt(0).toUpperCase() + user.role.slice(1) %></div>
                        </div>
                        <div class="nav-links">
                            <a href="/employee" class="nav-link <%= typeof currentPage !== 'undefined' && currentPage === 'dashboard' ? 'active' : '' %>">
                                <i class="fas fa-tachometer-alt"></i> Dashboard
                            </a>
                            <a href="/employee/timesheets" class="nav-link <%= typeof currentPage !== 'undefined' && currentPage === 'timesheets' ? 'active' : '' %>">
                                <i class="fas fa-file-alt"></i> My Timesheets
                            </a>
                            <a href="/employee/timesheets/new" class="nav-link new-timesheet">
                                <i class="fas fa-plus"></i> New Timesheet
                            </a>
                            <a href="/employee/reports" class="nav-link <%= typeof currentPage !== 'undefined' && currentPage === 'reports' ? 'active' : '' %>">
                                <i class="fas fa-chart-bar"></i> Reports
                            </a>
                        </div>
                        <form action="/auth/logout" method="POST" class="logout-form">
                            <button type="submit" class="btn btn-outline">
                                <i class="fas fa-sign-out-alt"></i> Logout
                            </button>
                        </form>
                    <% } %>
                </nav>
            </div>
        </div>
    </header>

    <main class="main">
        <div class="container-fluid">
            <% if (typeof success !== 'undefined' && success) { %>
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <%= success %>
                </div>
            <% } %>
            
            <% if (typeof error !== 'undefined' && error) { %>
                <div class="alert alert-error">
                    <i class="fas fa-exclamation-circle"></i>
                    <%= error %>
                </div>
            <% } %>

<div class="timesheet-form-container">
        <div class="form-header">
            <h1><%= isEdit ? 'Edit Timesheet' : 'New Timesheet' %></h1>
            <p>Week ending: <%= new Date(weekEnding).toLocaleDateString() %></p>
        </div>

        <form id="timesheetForm" class="timesheet-form">
            <input type="hidden" id="timesheetId" value="<%= timesheet ? timesheet.id : '' %>">
            <input type="hidden" id="weekEnding" value="<%= weekEnding %>">

            <!-- Monthly Time Capture Layout -->
            <div class="monthly-time-capture">
                <div class="timesheet-header">
                    <div class="company-info">
                        <h2>REVERSIDE CONSULTING</h2>
                        <p>Time Tracking System</p>
                    </div>
                    <div class="employee-info">
                        <div class="info-row">
                            <span class="label">Employee:</span>
                            <span class="value"><%= user.name %></span>
                        </div>
                        <div class="info-row">
                            <span class="label">Month:</span>
                            <span class="value" id="currentMonth"><%= new Date(weekEnding).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %></span>
                        </div>
                    </div>
                </div>

                <div class="timesheet-table-container">
                    <table class="timesheet-table">
                        <thead>
                            <tr>
                                <th>Day</th>
                                <th>Date</th>
                                <th>Time In</th>
                                <th>Time Out</th>
                                <th>Total Hours</th>
                                <th>Time In</th>
                                <th>Time Out</th>
                                <th>Total Hours</th>
                                <th>Daily Total</th>
                                <th>Week Total</th>
                                <th>Description / Task</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="timesheetBody">
                            <% 
                            const weekEndingDate = new Date(weekEnding);
                            const monthStart = new Date(weekEndingDate.getFullYear(), weekEndingDate.getMonth(), 1);
                            const monthEnd = new Date(weekEndingDate.getFullYear(), weekEndingDate.getMonth() + 1, 0);
                            const currentTimeEntries = timeEntries || [];
                            const daysInMonth = monthEnd.getDate();
                            let currentWeekTotal = 0;
                            let weekStartDate = null;
                            %>
                            
                            <% for (let day = 1; day <= daysInMonth; day++) { %>
                                <% 
                                const currentDate = new Date(weekEndingDate.getFullYear(), weekEndingDate.getMonth(), day);
                                const dateString = currentDate.toISOString().split('T')[0];
                                const dayOfWeek = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
                                const dayEntries = currentTimeEntries.filter(entry => entry.date === dateString);
                                const totalHours = dayEntries.reduce((sum, entry) => sum + parseFloat(entry.hours || 0), 0);
                                
                                // Check if this is the start of a new week (Monday)
                                const isMonday = currentDate.getDay() === 1;
                                if (isMonday) {
                                    weekStartDate = currentDate;
                                    currentWeekTotal = 0;
                                }
                                currentWeekTotal += totalHours;
                                
                                // Check if this is the end of a week (Sunday) or last day of month
                                const isSunday = currentDate.getDay() === 0;
                                const isLastDay = day === daysInMonth;
                                const showWeekTotal = isSunday || isLastDay;
                                
                                // Check if it's a weekend (Saturday = 6, Sunday = 0)
                                const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6;
                                const weekendClass = isWeekend ? 'weekend-row' : '';
                                const defaultTimeIn = isWeekend ? '00:00' : '09:00';
                                const defaultTimeOut = isWeekend ? '00:00' : '17:00';
                                const defaultHours = isWeekend ? '0.00' : '8.00';
                                %>
                                
                                <tr class="timesheet-row <%= weekendClass %>" data-date="<%= dateString %>">
                                    <td class="day-cell"><%= dayOfWeek %></td>
                                    <td class="date-cell"><%= currentDate.toLocaleDateString('en-CA') %></td>
                                    <td class="time-cell">
                                        <input type="time" class="time-input" name="time_in_1_<%= day %>" value="<%= defaultTimeIn %>">
                                    </td>
                                    <td class="time-cell">
                                        <input type="time" class="time-input" name="time_out_1_<%= day %>" value="<%= defaultTimeOut %>">
                                    </td>
                                    <td class="hours-cell">
                                        <input type="number" class="hours-input" name="hours_1_<%= day %>" value="<%= totalHours > 0 ? totalHours.toFixed(2) : defaultHours %>" step="0.01" min="0" max="24">
                                    </td>
                                    <td class="time-cell">
                                        <input type="time" class="time-input" name="time_in_2_<%= day %>" value="<%= isWeekend ? '00:00' : '' %>">
                                    </td>
                                    <td class="time-cell">
                                        <input type="time" class="time-input" name="time_out_2_<%= day %>" value="<%= isWeekend ? '00:00' : '' %>">
                                    </td>
                                    <td class="hours-cell">
                                        <input type="number" class="hours-input" name="hours_2_<%= day %>" value="<%= isWeekend ? '0.00' : '0.00' %>" step="0.01" min="0" max="24">
                                    </td>
                                    <td class="daily-total-cell">
                                        <span class="daily-total"><%= totalHours.toFixed(2) %></span>
                                    </td>
                                    <td class="week-total-cell">
                                        <% if (showWeekTotal) { %>
                                            <span class="week-total"><%= currentWeekTotal.toFixed(2) %></span>
                                        <% } else { %>
                                            <span class="week-total">-</span>
                                        <% } %>
                                    </td>
                                    <td class="description-cell">
                                        <input type="text" class="description-input" name="description_<%= day %>" value="<%= dayEntries.length > 0 ? dayEntries[0].description || '' : '' %>" placeholder="Enter task description">
                                    </td>
                                    <td class="actions-cell">
                                        <button type="button" class="btn-add-entry-small" data-date="<%= dateString %>">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                <!-- Month Navigation -->
                <div class="month-navigation">
                    <button type="button" class="btn-nav" id="prevMonth">
                        <i class="fas fa-chevron-left"></i> Previous Month
                    </button>
                    <span class="current-month" id="currentMonthDisplay">
                        <%= new Date(weekEnding).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %>
                    </span>
                    <button type="button" class="btn-nav" id="nextMonth">
                        Next Month <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>

            <!-- Hidden form for individual entries -->
            <div id="timeEntriesList" style="display: none;">
                <!-- This will be populated by JavaScript -->
            </div>

            <div class="form-actions">
                <button type="button" id="saveDraftBtn" class="btn btn-outline">
                    <i class="fas fa-save"></i> Save Draft
                </button>
                <button type="button" id="submitTimesheetBtn" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Submit Timesheet
                </button>
                <a href="/employee" class="btn btn-outline">
                    <i class="fas fa-arrow-left"></i> Cancel
                </a>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const timeEntriesList = document.getElementById('timeEntriesList');
            const addEntryBtn = document.getElementById('addEntryBtn');
            const saveDraftBtn = document.getElementById('saveDraftBtn');
            const submitTimesheetBtn = document.getElementById('submitTimesheetBtn');
            const timesheetId = document.getElementById('timesheetId').value;
            const weekEnding = document.getElementById('weekEnding').value;
            const weekStart = '<%= weekStart %>';

            let entryIndex = <%= timeEntries.length %>;

            // Add new time entry
            addEntryBtn.addEventListener('click', function() {
                addTimeEntry();
            });

            // Remove time entry
            timeEntriesList.addEventListener('click', function(e) {
                if (e.target.closest('.remove-entry-btn')) {
                    e.target.closest('.time-entry-item').remove();
                    updateEmptyState();
                }
            });

            // Save draft
            saveDraftBtn.addEventListener('click', function() {
                saveTimesheet(false);
            });

            // Submit timesheet
            submitTimesheetBtn.addEventListener('click', function() {
                saveTimesheet(true);
            });

            function addTimeEntry() {
                const entryHtml = `
                    <div class="time-entry-item" data-index="${entryIndex}">
                        <div class="form-group">
                            <label class="form-label">Project</label>
                            <input type="text" class="form-input project-input" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Date</label>
                            <input type="date" class="form-input date-input" min="${weekStart}" max="${weekEnding}" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Hours</label>
                            <input type="number" class="form-input hours-input" min="0.1" max="24" step="0.1" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-input description-input">
                        </div>
                        <div class="form-group">
                            <button type="button" class="btn btn-error btn-sm remove-entry-btn">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
                
                timeEntriesList.insertAdjacentHTML('beforeend', entryHtml);
                entryIndex++;
                updateEmptyState();
            }

            function updateEmptyState() {
                const entries = timeEntriesList.querySelectorAll('.time-entry-item');
                const emptyState = timeEntriesList.querySelector('.empty-state');
                
                if (entries.length === 0 && !emptyState) {
                    timeEntriesList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-clock"></i>
                            <p>No time entries yet. Click "Add Entry" to get started.</p>
                        </div>
                    `;
                } else if (entries.length > 0 && emptyState) {
                    emptyState.remove();
                }
            }

            function getTimeEntries() {
                const entries = [];
                const entryItems = timeEntriesList.querySelectorAll('.time-entry-item');
                
                entryItems.forEach(item => {
                    const project = item.querySelector('.project-input').value;
                    const date = item.querySelector('.date-input').value;
                    const hours = parseFloat(item.querySelector('.hours-input').value);
                    const description = item.querySelector('.description-input').value;
                    
                    if (project && date && hours) {
                        entries.push({
                            project: project.trim(),
                            date: date,
                            hours: hours,
                            description: description.trim()
                        });
                    }
                });
                
                return entries;
            }

            function validateEntries() {
                const entries = getTimeEntries();
                
                if (entries.length === 0) {
                    alert('Please add at least one time entry.');
                    return false;
                }
                
                // Validate dates are within the week
                const weekStartDate = new Date(weekStart);
                const weekEndDate = new Date(weekEnding);
                
                for (const entry of entries) {
                    const entryDate = new Date(entry.date);
                    if (entryDate < weekStartDate || entryDate > weekEndDate) {
                        alert(`Date ${entry.date} is outside the selected week.`);
                        return false;
                    }
                }
                
                return true;
            }

            function saveTimesheet(submit = false) {
                if (!validateEntries()) {
                    return;
                }
                
                const entries = getTimeEntries();
                const url = timesheetId ? `/api/timesheets/${timesheetId}` : '/api/timesheets';
                const method = timesheetId ? 'PUT' : 'POST';
                
                const data = {
                    week_ending: weekEnding,
                    time_entries: entries
                };
                
                fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        if (submit) {
                            // Submit the timesheet
                            return fetch(`/api/timesheets/${result.timesheet_id || timesheetId}/submit`, {
                                method: 'POST'
                            });
                        } else {
                            // Update the timesheet ID for future edits
                            if (result.timesheet_id) {
                                document.getElementById('timesheetId').value = result.timesheet_id;
                            }
                            alert('Timesheet saved successfully!');
                        }
                    } else {
                        throw new Error(result.error || 'Failed to save timesheet');
                    }
                })
                .then(response => {
                    if (response) {
                        return response.json();
                    }
                })
                .then(result => {
                    if (result && result.success) {
                        alert('Timesheet submitted successfully!');
                        window.location.href = '/employee';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error: ' + error.message);
                });
            }

            // Initialize empty state if no entries
            updateEmptyState();
        });
    </script>

    <style>
        .timesheet-form-container {
            width: 100%;
            margin: 0;
        }

        .form-header {
            margin-bottom: 1rem;
        }

        .form-header h1 {
            color: var(--dark-gray);
            margin-bottom: 0.5rem;
        }

        .form-header p {
            color: var(--medium-gray);
        }

        .time-entries-section {
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .section-header h3 {
            color: var(--dark-gray);
            margin: 0;
        }

        .monthly-time-capture {
            margin-bottom: 2rem;
        }

        .timesheet-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--white);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            margin-bottom: 1rem;
        }

        .company-info h2 {
            color: var(--primary-blue);
            margin: 0 0 0.25rem 0;
            font-size: 1.5rem;
        }

        .company-info p {
            color: var(--medium-gray);
            margin: 0;
            font-size: 0.9rem;
        }

        .employee-info {
            text-align: right;
        }

        .info-row {
            margin-bottom: 0.5rem;
        }

        .info-row .label {
            font-weight: 600;
            color: var(--dark-gray);
            margin-right: 0.5rem;
        }

        .info-row .value {
            color: var(--primary-blue);
        }

        .container-fluid {
            width: 100%;
            max-width: none;
            padding: 0 20px;
        }

        .timesheet-table-container {
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            margin-bottom: 1rem;
            width: 100%;
            overflow: visible;
        }

        .timesheet-table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }

        .timesheet-table th {
            background: var(--primary-blue);
            color: var(--white);
            padding: 0.75rem 0.5rem;
            text-align: center;
            font-weight: 600;
            font-size: 0.85rem;
            border: 1px solid var(--border-color);
        }

        .timesheet-table td {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            text-align: center;
            vertical-align: middle;
        }

        .timesheet-row:nth-child(even) {
            background: var(--light-gray);
        }

        .timesheet-row:hover {
            background: #f0f8ff;
        }

        .weekend-row {
            background: #ffe6e6 !important;
            color: #8b0000;
        }

        .weekend-row:hover {
            background: #ffcccc !important;
        }

        .weekend-row .day-cell {
            font-weight: 700;
            color: #8b0000;
        }

        .weekend-row .date-cell {
            color: #8b0000;
            font-weight: 600;
        }

        .weekend-row .time-input,
        .weekend-row .hours-input {
            background: #fff5f5;
            border-color: #ffb3b3;
            color: #8b0000;
        }

        .weekend-row .time-input:focus,
        .weekend-row .hours-input:focus {
            border-color: #ff6666;
            box-shadow: 0 0 0 2px rgba(255, 102, 102, 0.2);
        }

        .weekend-row .daily-total,
        .weekend-row .week-total {
            color: #8b0000;
            font-weight: 700;
        }

        .day-cell {
            font-weight: 600;
            color: var(--dark-gray);
            width: 8%;
        }

        .date-cell {
            font-weight: 500;
            color: var(--primary-blue);
            width: 10%;
        }

        .time-input, .hours-input, .description-input {
            width: 100%;
            padding: 0.25rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.8rem;
            text-align: center;
        }

        .time-input {
            width: 100%;
        }

        .hours-input {
            width: 100%;
        }

        .description-input {
            width: 100%;
            text-align: left;
        }

        .time-cell {
            width: 6%;
        }

        .hours-cell {
            width: 5%;
        }

        .daily-total-cell {
            width: 6%;
        }

        .week-total-cell {
            width: 6%;
        }

        .description-cell {
            width: 35%;
        }

        .actions-cell {
            width: 3%;
        }

        .daily-total, .week-total {
            font-weight: 700;
            color: var(--primary-blue);
            font-size: 0.9rem;
        }

        .daily-total-cell, .week-total-cell {
            background: #f8f9fa;
            font-weight: 600;
        }

        .btn-add-entry-small {
            background: var(--primary-blue);
            color: var(--white);
            border: none;
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            font-size: 0.7rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .btn-add-entry-small:hover {
            background: var(--secondary-blue);
        }

        .month-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--white);
            padding: 1rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .btn-nav {
            background: var(--primary-blue);
            color: var(--white);
            border: none;
            border-radius: var(--border-radius);
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
        }

        .btn-nav:hover {
            background: var(--secondary-blue);
        }

        .current-month {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--primary-blue);
        }

        /* Responsive design for full width */
        @media (max-width: 1200px) {
            .container-fluid {
                padding: 0 10px;
            }
            
            .timesheet-table th,
            .timesheet-table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.8rem;
            }
        }

        @media (max-width: 768px) {
            .container-fluid {
                padding: 0 5px;
            }
            
            .timesheet-table th,
            .timesheet-table td {
                padding: 0.25rem;
                font-size: 0.7rem;
            }
            
            .description-cell {
                width: 30%;
            }
        }

        .time-entry-item {
            display: grid;
            grid-template-columns: 2fr 1fr 100px 2fr auto;
            gap: 1rem;
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            margin-bottom: 1rem;
            background: var(--light-gray);
        }

        .time-entry-item .form-group {
            margin-bottom: 0;
        }

        .time-entry-item .form-label {
            font-size: 0.75rem;
            margin-bottom: 0.25rem;
        }

        .time-entry-item .form-input {
            padding: 0.5rem;
            font-size: 0.875rem;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            padding: 1rem;
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .empty-state {
            text-align: center;
            padding: 1rem;
            color: var(--medium-gray);
        }

        .empty-state i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: var(--border-color);
        }

        @media (max-width: 768px) {
            .week-grid {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
            
            .day-block {
                min-height: 150px;
            }
            
            .time-entry-item {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
            
            .form-actions {
                flex-direction: column;
            }
        }
    </style>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 REVERSIDE CONSULTING. All rights reserved.</p>
        </div>
    </footer>

    <script src="/js/app.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const timeEntriesList = document.getElementById('timeEntriesList');
            let entryCounter = 0;
            
            // Initialize with existing entries
            initializeExistingEntries();
            
            // Add entry button handlers
            document.querySelectorAll('.btn-add-entry-small').forEach(button => {
                button.addEventListener('click', function() {
                    const date = this.getAttribute('data-date');
                    addTimeEntry(date);
                });
            });

            // Time input change handlers
            document.querySelectorAll('.time-input, .hours-input').forEach(input => {
                input.addEventListener('change', function() {
                    updateDailyTotal(this);
                });
            });
            
            // Remove entry button handlers
            document.addEventListener('click', function(e) {
                if (e.target.closest('.btn-remove-entry')) {
                    const entryId = e.target.closest('.btn-remove-entry').getAttribute('data-entry-id');
                    removeTimeEntry(entryId);
                }
            });
            
            // Form submission
            document.getElementById('timesheetForm').addEventListener('submit', function(e) {
                e.preventDefault();
                submitTimesheet();
            });
            
            // Save draft button
            document.getElementById('saveDraftBtn').addEventListener('click', function() {
                saveDraft();
            });
            
            // Submit timesheet button
            document.getElementById('submitTimesheetBtn').addEventListener('click', function() {
                submitTimesheet();
            });
            
            // Month navigation buttons
            document.getElementById('prevMonth').addEventListener('click', function() {
                navigateMonth(-1);
            });
            
            document.getElementById('nextMonth').addEventListener('click', function() {
                navigateMonth(1);
            });
            
            function initializeExistingEntries() {
                // This will be populated by the server-side data
                // For now, we'll handle new entries dynamically
            }
            
            function addTimeEntry(date) {
                // Create a modal or inline form for adding entries
                const project = prompt('Enter project name:');
                if (!project) return;
                
                const hours = prompt('Enter hours worked:');
                if (!hours || isNaN(hours) || parseFloat(hours) <= 0) {
                    alert('Please enter a valid number of hours');
                    return;
                }
                
                const description = prompt('Enter description (optional):') || '';
                
                // Add to the day block
                addEntryToDay(date, {
                    id: 'new_' + (++entryCounter),
                    project: project,
                    hours: parseFloat(hours),
                    description: description
                });
                
                // Add to hidden form
                addEntryToForm(date, {
                    id: 'new_' + entryCounter,
                    project: project,
                    hours: parseFloat(hours),
                    description: description
                });
            }
            
            function addEntryToDay(date, entry) {
                const dayBlock = document.querySelector(`[data-date="${date}"]`);
                const entriesContainer = dayBlock.querySelector('.day-entries');
                const noEntries = entriesContainer.querySelector('.no-entries');
                
                if (noEntries) {
                    noEntries.remove();
                }
                
                const entryElement = document.createElement('div');
                entryElement.className = 'entry-item';
                entryElement.setAttribute('data-entry-id', entry.id);
                entryElement.innerHTML = `
                    <div class="entry-project">${entry.project}</div>
                    <div class="entry-hours">${entry.hours}h</div>
                    <div class="entry-description">${entry.description}</div>
                    <button type="button" class="btn-remove-entry" data-entry-id="${entry.id}">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                
                entriesContainer.appendChild(entryElement);
                
                // Update hours total
                updateDayHours(date);
            }
            
            function addEntryToForm(date, entry) {
                const entryElement = document.createElement('div');
                entryElement.className = 'time-entry-item';
                entryElement.setAttribute('data-index', entryCounter);
                entryElement.innerHTML = `
                    <div class="form-group">
                        <input type="text" class="form-input project-input" value="${entry.project}" name="time_entries[${entryCounter}][project]" required>
                    </div>
                    <div class="form-group">
                        <input type="date" class="form-input date-input" value="${date}" name="time_entries[${entryCounter}][date]" required>
                    </div>
                    <div class="form-group">
                        <input type="number" class="form-input hours-input" value="${entry.hours}" name="time_entries[${entryCounter}][hours]" min="0.1" max="24" step="0.1" required>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-input description-input" value="${entry.description}" name="time_entries[${entryCounter}][description]">
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-error btn-sm remove-entry-btn" data-entry-id="${entry.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                
                timeEntriesList.appendChild(entryElement);
            }
            
            function removeTimeEntry(entryId) {
                // Remove from day block
                const entryElement = document.querySelector(`[data-entry-id="${entryId}"]`);
                if (entryElement) {
                    const dayBlock = entryElement.closest('.day-block');
                    const date = dayBlock.getAttribute('data-date');
                    
                    entryElement.remove();
                    
                    // Check if day has no entries
                    const entriesContainer = dayBlock.querySelector('.day-entries');
                    if (entriesContainer.children.length === 0) {
                        const noEntries = document.createElement('div');
                        noEntries.className = 'no-entries';
                        noEntries.textContent = 'No entries';
                        entriesContainer.appendChild(noEntries);
                    }
                    
                    // Update hours total
                    updateDayHours(date);
                }
                
                // Remove from form
                const formEntry = timeEntriesList.querySelector(`[data-entry-id="${entryId}"]`);
                if (formEntry) {
                    formEntry.remove();
                }
            }
            
            function updateDailyTotal(input) {
                const row = input.closest('.timesheet-row');
                const date = row.getAttribute('data-date');
                
                // Get hours from both time periods
                const hours1 = parseFloat(row.querySelector('input[name*="hours_1_"]').value) || 0;
                const hours2 = parseFloat(row.querySelector('input[name*="hours_2_"]').value) || 0;
                const dailyTotal = hours1 + hours2;
                
                // Update daily total display
                const dailyTotalElement = row.querySelector('.daily-total');
                dailyTotalElement.textContent = dailyTotal.toFixed(2);
                
                // Update week total
                updateWeekTotal(row);
            }
            
            function updateWeekTotal(row) {
                const date = row.getAttribute('data-date');
                const currentDate = new Date(date);
                const dayOfWeek = currentDate.getDay();
                
                // Find the start of the week (Monday)
                const weekStart = new Date(currentDate);
                weekStart.setDate(currentDate.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));
                
                // Find the end of the week (Sunday)
                const weekEnd = new Date(weekStart);
                weekEnd.setDate(weekStart.getDate() + 6);
                
                // Calculate week total
                let weekTotal = 0;
                const allRows = document.querySelectorAll('.timesheet-row');
                
                allRows.forEach(row => {
                    const rowDate = new Date(row.getAttribute('data-date'));
                    if (rowDate >= weekStart && rowDate <= weekEnd) {
                        const dailyTotal = parseFloat(row.querySelector('.daily-total').textContent) || 0;
                        weekTotal += dailyTotal;
                    }
                });
                
                // Update week total for all rows in this week
                allRows.forEach(row => {
                    const rowDate = new Date(row.getAttribute('data-date'));
                    if (rowDate >= weekStart && rowDate <= weekEnd) {
                        const weekTotalElement = row.querySelector('.week-total');
                        if (rowDate.getDay() === 0 || rowDate.getTime() === weekEnd.getTime()) {
                            weekTotalElement.textContent = weekTotal.toFixed(2);
                        } else {
                            weekTotalElement.textContent = '-';
                        }
                    }
                });
            }
            
            function updateDayHours(date) {
                const dayBlock = document.querySelector(`[data-date="${date}"]`);
                const entries = dayBlock.querySelectorAll('.entry-item');
                let totalHours = 0;
                
                entries.forEach(entry => {
                    const hoursText = entry.querySelector('.entry-hours').textContent;
                    const hours = parseFloat(hoursText.replace('h', ''));
                    totalHours += hours;
                });
                
                const hoursNumber = dayBlock.querySelector('.hours-number');
                if (hoursNumber) {
                    hoursNumber.textContent = totalHours.toFixed(1);
                }
            }
            
            function saveDraft() {
                const data = collectTimesheetData();
                data.status = 'draft';
                
                fetch('/employee/timesheets', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Timesheet saved as draft');
                        if (data.timesheet_id) {
                            document.getElementById('timesheetId').value = data.timesheet_id;
                        }
                    } else {
                        alert('Error saving timesheet: ' + (data.error || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error saving timesheet');
                });
            }
            
            function submitTimesheet() {
                const data = collectTimesheetData();
                data.status = 'submitted';
                
                fetch('/employee/timesheets', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Timesheet submitted successfully');
                        window.location.href = '/employee/timesheets';
                    } else {
                        alert('Error submitting timesheet: ' + (data.error || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error submitting timesheet');
                });
            }
            
            function navigateMonth(direction) {
                const currentDate = new Date(weekEnding);
                const newDate = new Date(currentDate);
                newDate.setMonth(currentDate.getMonth() + direction);
                
                // Navigate to the new month's timesheet
                const newWeekEnding = newDate.toISOString().split('T')[0];
                window.location.href = `/employee/timesheets/new?week_ending=${newWeekEnding}`;
            }
            
            function collectTimesheetData() {
                const weekEnding = document.getElementById('weekEnding').value;
                const timeEntries = [];
                
                // Collect data from each day row
                document.querySelectorAll('.timesheet-row').forEach(row => {
                    const date = row.getAttribute('data-date');
                    const dayOfWeek = row.querySelector('.day-cell').textContent.trim();
                    
                    // Get first time period
                    const timeIn1 = row.querySelector('input[name*="time_in_1_"]').value;
                    const timeOut1 = row.querySelector('input[name*="time_out_1_"]').value;
                    const hours1 = parseFloat(row.querySelector('input[name*="hours_1_"]').value) || 0;
                    const description1 = row.querySelector('input[name*="description_"]').value.trim();
                    
                    // Get second time period
                    const timeIn2 = row.querySelector('input[name*="time_in_2_"]').value;
                    const timeOut2 = row.querySelector('input[name*="time_out_2_"]').value;
                    const hours2 = parseFloat(row.querySelector('input[name*="hours_2_"]').value) || 0;
                    
                    // Only add entries if there are hours worked
                    if (hours1 > 0) {
                        timeEntries.push({
                            project: 'Work', // Default project name
                            date: date,
                            hours: hours1,
                            description: description1 || `${dayOfWeek} work`
                        });
                    }
                    
                    if (hours2 > 0) {
                        timeEntries.push({
                            project: 'Work', // Default project name
                            date: date,
                            hours: hours2,
                            description: description1 || `${dayOfWeek} work (Period 2)`
                        });
                    }
                });
                
                return {
                    week_ending: weekEnding,
                    time_entries: timeEntries
                };
            }
        });
    </script>
</body>
</html>
